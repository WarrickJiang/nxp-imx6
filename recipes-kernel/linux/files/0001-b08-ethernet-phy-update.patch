From d6df37f8dbc850477476f021f2de77f0a7be6fbf Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Fri, 4 May 2018 11:25:05 +0800
Subject: [PATCH 1/5] b08:ethernet & phy update

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/net/ethernet/freescale/fec_main.c |   5 ++
 drivers/net/phy/Makefile                  |   2 +-
 drivers/net/phy/phy_reset.c               | 129 ++++++++++++++++++++++++++++++
 include/linux/fec.h                       |   2 +
 4 files changed, 137 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/phy/phy_reset.c

diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index 6d6da7134d04..1e27d7860943 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -3597,6 +3597,11 @@ fec_probe(struct platform_device *pdev)
 	pm_runtime_set_active(&pdev->dev);
 	pm_runtime_enable(&pdev->dev);
 
+#ifdef CONFIG_MICREL_PHY
+	if (of_machine_is_compatible("fsl,imx6sx-seco-b08"))
+		ret = fec_phy_reset(pdev);
+	else 
+#endif
 	ret = fec_reset_phy(pdev);
 	if (ret)
 		goto failed_reset;
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index e36db9a2ba38..b82f7444392d 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -58,7 +58,7 @@ obj-$(CONFIG_LXT_PHY)		+= lxt.o
 obj-$(CONFIG_MARVELL_PHY)	+= marvell.o
 obj-$(CONFIG_MESON_GXL_PHY)	+= meson-gxl.o
 obj-$(CONFIG_MICREL_KS8995MA)	+= spi_ks8995.o
-obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+obj-$(CONFIG_MICREL_PHY)	+= micrel.o phy_reset.o
 obj-$(CONFIG_MICROCHIP_PHY)	+= microchip.o
 obj-$(CONFIG_MICROSEMI_PHY)	+= mscc.o
 obj-$(CONFIG_NATIONAL_PHY)	+= national.o
diff --git a/drivers/net/phy/phy_reset.c b/drivers/net/phy/phy_reset.c
new file mode 100644
index 000000000000..5cfdb670db0f
--- /dev/null
+++ b/drivers/net/phy/phy_reset.c
@@ -0,0 +1,129 @@
+
+/*	This program is free software; you can redistribute it and/or modify
+	it under the terms of the GNU General Public License as published by
+	the Free Software Foundation; either version 2 of the License, or
+	(at your option) any later version.
+
+	This program is distributed in the hope that it will be useful,
+	but WITHOUT ANY WARRANTY; without even the implied warranty of
+	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+	GNU General Public License for more details.
+
+	Seco A62 board's ETHERNET PHY LAYER reset support, based on Markus Pargmann approach.
+*/
+
+#include <linux/ctype.h>
+#include <linux/delay.h>
+#include <linux/export.h>
+#include <linux/gpio.h>
+#include <linux/init.h>
+#include <linux/of_gpio.h>
+#include <linux/of.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/netdevice.h>
+#include <linux/fec.h>
+
+struct phy_reset_cfg {
+	struct pinctrl *pctl;
+	struct pinctrl_state *pstate_reset;
+	struct pinctrl_state *pstate_run;
+	int gpio_addr01;
+	int gpio_addr01_value;
+	int gpio_reset;
+};
+
+static int phy_parse_pinctl(struct device *dev,
+		struct phy_reset_cfg *cfg)
+{
+	struct pinctrl *p;
+	struct pinctrl_state *state;
+	int gpio;
+	int ret;
+	enum of_gpio_flags gpio_flags;
+
+	p = devm_pinctrl_get(dev);
+	if (IS_ERR(p)) {
+		dev_err(dev, "Failed to get pinctrl\n");
+		return PTR_ERR(p);
+	}
+	cfg->pctl = p;
+
+	state = pinctrl_lookup_state(p, "phy-reset");
+	if (IS_ERR(state)) {
+		dev_err(dev, "Can't find pinctrl state phy-reset\n");
+		return PTR_ERR(state);
+	}
+	cfg->pstate_reset = state;
+	
+	state = pinctrl_lookup_state(p, "phy-running");
+	if (IS_ERR(state)) {
+		dev_err(dev, "Can't find pinctrl state phy-running\n");
+		return PTR_ERR(state);
+	}
+	cfg->pstate_run = state;
+
+	gpio = of_get_named_gpio(dev->of_node, "phy-reset-gpios", 0);
+	if (gpio < 0) {
+		dev_err(dev, "Can't find phy-addr01 gpio\n");
+		return gpio;
+	}
+	ret = devm_gpio_request(dev, gpio, "phy addr01");
+	if (ret) {
+		dev_err(dev, "Failed requesting phy-reset-gpios gpio\n");
+		return ret;
+	}
+	cfg->gpio_reset = gpio;
+
+	gpio = of_get_named_gpio_flags(dev->of_node, "phy-addr01-gpios", 0, &gpio_flags);
+	if (gpio < 0) {
+		dev_err(dev, "Can't find phy-addr01-gpios gpio %d\n", gpio);
+		return gpio;
+	}
+	ret = devm_gpio_request(dev, gpio, "phy addr01");
+	if (ret) {
+		dev_err(dev, "Failed requesting phy-addr01-gpios gpio\n");
+		return ret;
+	}
+	
+	cfg->gpio_addr01 = gpio;
+
+	if ( gpio_flags & OF_GPIO_ACTIVE_LOW )
+	   cfg->gpio_addr01_value = 0;
+	else
+	   cfg->gpio_addr01_value = 1;
+
+	printk("PHY reset pinctl parsing ok [GPIO_ADDR = %d [VALUE = %d] \n", cfg->gpio_addr01, cfg->gpio_addr01_value);
+	return 0;
+}
+
+int fec_phy_reset(struct platform_device *pdev)
+{	
+	struct phy_reset_cfg cfg;
+	struct pinctrl *p; 
+	int ret;
+
+	ret = phy_parse_pinctl(&pdev->dev, &cfg);
+	if (ret)
+		return ret;
+
+	p = cfg.pctl;
+	pinctrl_select_state(p, cfg.pstate_reset);
+
+	gpio_direction_output(cfg.gpio_reset, 0);
+	gpio_direction_output(cfg.gpio_addr01, 1);
+	gpio_set_value(cfg.gpio_addr01, cfg.gpio_addr01_value);
+	gpio_set_value(cfg.gpio_reset, 0);
+
+	msleep(2);
+	gpio_set_value(cfg.gpio_reset, 1);
+	msleep(20);	
+	gpio_free(cfg.gpio_addr01);
+	msleep(10);	
+
+	pinctrl_select_state(p, cfg.pstate_run);
+	
+	return 0;
+}
+EXPORT_SYMBOL_GPL(fec_phy_reset);
+
diff --git a/include/linux/fec.h b/include/linux/fec.h
index 1454a503622d..7ada566c5f0b 100644
--- a/include/linux/fec.h
+++ b/include/linux/fec.h
@@ -22,4 +22,6 @@ struct fec_platform_data {
 	void (*sleep_mode_enable)(int enabled);
 };
 
+int fec_phy_reset(struct platform_device *pdev);
+
 #endif
-- 
2.14.3

