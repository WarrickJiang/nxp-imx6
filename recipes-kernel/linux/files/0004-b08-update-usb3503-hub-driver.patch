From 25d5d976da64f3ccc96c36542f730c8f01656e39 Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Thu, 10 May 2018 17:52:52 +0800
Subject: [PATCH 4/5] b08:update usb3503 hub driver

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/usb/misc/usb3503.c | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/drivers/usb/misc/usb3503.c b/drivers/usb/misc/usb3503.c
index 8e7737d7ac0a..c85942e15aab 100644
--- a/drivers/usb/misc/usb3503.c
+++ b/drivers/usb/misc/usb3503.c
@@ -27,6 +27,7 @@
 #include <linux/of_gpio.h>
 #include <linux/platform_device.h>
 #include <linux/platform_data/usb3503.h>
+#include <linux/regulator/consumer.h>
 #include <linux/regmap.h>
 
 #define USB3503_VIDL		0x00
@@ -62,6 +63,7 @@ struct usb3503 {
 	u8	port_off_mask;
 	int	gpio_intn;
 	int	gpio_reset;
+	int	gpio_clk_en;
 	int	gpio_connect;
 	bool	secondary_ref_clk;
 };
@@ -173,6 +175,7 @@ static int usb3503_probe(struct usb3503 *hub)
 	struct device *dev = hub->dev;
 	struct usb3503_platform_data *pdata = dev_get_platdata(dev);
 	struct device_node *np = dev->of_node;
+	struct regulator *reg_vbus;
 	int err;
 	u32 mode = USB3503_MODE_HUB;
 	const u32 *property;
@@ -249,6 +252,18 @@ static int usb3503_probe(struct usb3503 *hub)
 			}
 		}
 
+		if (of_machine_is_compatible("fsl,imx6sx-seco-b08")) {
+			if ((hub->port_off_mask & 0x1) != 0x1) {
+				reg_vbus = devm_regulator_get(dev, "vbusport3");
+				regulator_enable(reg_vbus);
+			}
+
+			if ((hub->port_off_mask & 0x2) != 0x2) {
+				reg_vbus = devm_regulator_get(dev, "vbusport4");
+				regulator_enable(reg_vbus);
+			}
+		}
+
 		hub->gpio_intn	= of_get_named_gpio(np, "intn-gpios", 0);
 		if (hub->gpio_intn == -EPROBE_DEFER)
 			return -EPROBE_DEFER;
@@ -258,6 +273,9 @@ static int usb3503_probe(struct usb3503 *hub)
 		hub->gpio_reset = of_get_named_gpio(np, "reset-gpios", 0);
 		if (hub->gpio_reset == -EPROBE_DEFER)
 			return -EPROBE_DEFER;
+		hub->gpio_clk_en = of_get_named_gpio(np, "clk-en-gpios", 0);
+		if (hub->gpio_clk_en == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
 		of_property_read_u32(np, "initial-mode", &mode);
 		hub->mode = mode;
 	}
@@ -300,6 +318,17 @@ static int usb3503_probe(struct usb3503 *hub)
 		}
 	}
 
+	if (gpio_is_valid(hub->gpio_clk_en)) {
+		err = devm_gpio_request_one(dev, hub->gpio_clk_en,
+				GPIOF_OUT_INIT_HIGH, "usb3503 clk_en");
+		if (err) {
+			dev_err(dev,
+				"unable to request GPIO %d as clk_en pin (%d)\n",
+				hub->gpio_clk_en, err);
+			return err;
+		}
+	}
+
 	usb3503_switch_mode(hub, hub->mode);
 
 	dev_info(dev, "%s: probed in %s mode\n", __func__,
-- 
2.14.3

