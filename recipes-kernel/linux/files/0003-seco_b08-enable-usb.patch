From d84aeb6af99120ce192d7a7cbd8d45a3c6b39cff Mon Sep 17 00:00:00 2001
From: Jiang Lu <lu.jiang@windriver.com>
Date: Tue, 8 May 2018 10:26:31 +0800
Subject: [PATCH 3/5] seco_b08:enable usb

Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
---
 drivers/usb/chipidea/core.c        | 44 ++++++++++++++++++++++++++++++++++++++
 drivers/usb/chipidea/otg.c         | 17 +++++++++++++++
 drivers/usb/chipidea/usbmisc_imx.c | 36 +++++++++++++++++++++++++++++++
 include/linux/usb/chipidea.h       |  2 ++
 4 files changed, 99 insertions(+)

diff --git a/drivers/usb/chipidea/core.c b/drivers/usb/chipidea/core.c
index c2c5d1d1428a..48ad5e36711c 100644
--- a/drivers/usb/chipidea/core.c
+++ b/drivers/usb/chipidea/core.c
@@ -62,6 +62,7 @@
 #include <linux/usb/chipidea.h>
 #include <linux/usb/of.h>
 #include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <linux/regulator/consumer.h>
 #include <linux/usb/ehci_def.h>
 
@@ -535,6 +536,19 @@ int hw_device_reset(struct ci_hdrc *ci)
 	return 0;
 }
 
+static irqreturn_t ci_id_irq(int irq, void *data)
+{
+	struct ci_hdrc *ci = data;
+	if (gpio_get_value(ci->platdata->id_gpio) == 0) {
+		ci->id_event = true;
+		ci_otg_queue_work(ci);
+	} else {
+		ci->id_event = true;
+		ci_otg_queue_work(ci);
+	}
+	return IRQ_HANDLED;
+}
+
 static irqreturn_t ci_irq(int irq, void *data)
 {
 	struct ci_hdrc *ci = data;
@@ -664,6 +678,9 @@ static int ci_get_platdata(struct device *dev,
 
 	platdata->itc_setting = 1;
 
+	if (of_find_property(dev->of_node, "non-zero-ttctrl-ttha", NULL))
+		platdata->flags |= CI_HDRC_SET_NON_ZERO_TTHA;
+
 	of_property_read_u32(dev->of_node, "itc-setting",
 					&platdata->itc_setting);
 
@@ -697,6 +714,25 @@ static int ci_get_platdata(struct device *dev,
 	if (of_find_property(dev->of_node, "non-zero-ttctrl-ttha", NULL))
 		platdata->flags |= CI_HDRC_SET_NON_ZERO_TTHA;
 
+
+        if (of_machine_is_compatible("fsl,imx6sx-seco-b08")) {
+	    if (platdata->dr_mode == USB_DR_MODE_OTG) {
+        	platdata->id_gpio = of_get_named_gpio(dev->of_node, "idirq-gpios", 0);
+        	if (platdata->id_gpio == -EPROBE_DEFER)
+                        return -EPROBE_DEFER;
+		ret = gpio_request(platdata->id_gpio, "id_irq-gpio");
+		if (ret) {
+			pr_err("%s: can't request gpio port %d, err: %d\n",
+				__func__, platdata->id_gpio, ret);
+			return -EINVAL;
+		}
+
+                gpio_direction_input(platdata->id_gpio);
+
+                platdata->id_irq = gpio_to_irq(platdata->id_gpio);
+	    }
+	}
+
 	ext_id = ERR_PTR(-ENODEV);
 	ext_vbus = ERR_PTR(-ENODEV);
 	if (of_property_read_bool(dev->of_node, "extcon")) {
@@ -1109,6 +1145,14 @@ static int ci_hdrc_probe(struct platform_device *pdev)
 	if (ret)
 		goto stop;
 
+        if (of_machine_is_compatible("fsl,imx6sx-seco-b08")) {
+	    if (ci->platdata->dr_mode == USB_DR_MODE_OTG) {
+		ret = devm_request_irq(dev, ci->platdata->id_irq, ci_id_irq, 
+			IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+ 			"usb_otg_id", ci);
+	    }
+	}
+
 	if (ci->supports_runtime_pm) {
 		pm_runtime_set_active(&pdev->dev);
 		pm_runtime_enable(&pdev->dev);
diff --git a/drivers/usb/chipidea/otg.c b/drivers/usb/chipidea/otg.c
index 900352092a69..b3ae298aa452 100644
--- a/drivers/usb/chipidea/otg.c
+++ b/drivers/usb/chipidea/otg.c
@@ -18,6 +18,7 @@
 #include <linux/usb/otg.h>
 #include <linux/usb/gadget.h>
 #include <linux/usb/chipidea.h>
+#include <linux/of_gpio.h>
 
 #include "ci.h"
 #include "bits.h"
@@ -127,6 +128,12 @@ enum ci_role ci_otg_role(struct ci_hdrc *ci)
 		? CI_ROLE_GADGET
 		: CI_ROLE_HOST;
 
+        if (of_machine_is_compatible("fsl,imx6sx-seco-b08")) 
+            if (ci->platdata->dr_mode == USB_DR_MODE_OTG)
+	       role = gpio_get_value(ci->platdata->id_gpio)
+		? CI_ROLE_GADGET
+		: CI_ROLE_HOST;
+
 	return role;
 }
 
@@ -212,6 +219,16 @@ void ci_handle_id_switch(struct ci_hdrc *ci)
 
 	mutex_lock(&ci->mutex);
 	role = ci_otg_role(ci);
+
+	if (of_machine_is_compatible("fsl,imx6sx-seco-b08") && (ci->platdata->dr_mode == USB_DR_MODE_OTG)) {
+		if (role == CI_ROLE_HOST) {
+			regulator_enable(ci->platdata->reg_vbus);
+		} else {
+			if (regulator_is_enabled(ci->platdata->reg_vbus))
+				regulator_disable(ci->platdata->reg_vbus);
+		}
+	}
+
 	if (role != ci->role) {
 		dev_dbg(ci->dev, "switching from %s to %s\n",
 			ci_role(ci)->name, ci->roles[role]->name);
diff --git a/drivers/usb/chipidea/usbmisc_imx.c b/drivers/usb/chipidea/usbmisc_imx.c
index 5c35a0f7de1a..e5a28d01793c 100644
--- a/drivers/usb/chipidea/usbmisc_imx.c
+++ b/drivers/usb/chipidea/usbmisc_imx.c
@@ -12,6 +12,7 @@
 
 #include <linux/module.h>
 #include <linux/of_platform.h>
+#include <linux/clk.h>
 #include <linux/err.h>
 #include <linux/io.h>
 #include <linux/delay.h>
@@ -170,6 +171,7 @@ struct usbmisc_ops {
 struct imx_usbmisc {
 	void __iomem *base;
 	spinlock_t lock;
+	struct clk *clk;
 	const struct usbmisc_ops *ops;
 };
 
@@ -511,6 +513,22 @@ static int usbmisc_imx6sx_init(struct imx_usbmisc_data *data)
 
 	usbmisc_imx6q_init(data);
 
+	/* For HSIC controller */
+	if (of_machine_is_compatible("fsl,imx6sx-seco-b08") || (data->index == 2)) {
+		spin_lock_irqsave(&usbmisc->lock, flags);
+		writel(0x80001842, usbmisc->base + 0x8 + data->index * 4);
+		writel(0x00003800, usbmisc->base + data->index * 4);
+		spin_unlock_irqrestore(&usbmisc->lock, flags);
+
+		usleep_range(1000, 3000);
+
+		spin_lock_irqsave(&usbmisc->lock, flags);
+		writel(0x00003000, usbmisc->base + data->index * 4);
+		spin_unlock_irqrestore(&usbmisc->lock, flags);
+
+		usleep_range(1000, 3000);
+	}
+
 	spin_lock_irqsave(&usbmisc->lock, flags);
 	if (data->index == 0 || data->index == 1) {
 		reg = usbmisc->base + MX6_USB_OTG1_PHY_CTRL + data->index * 4;
@@ -1249,6 +1267,7 @@ static int usbmisc_imx_probe(struct platform_device *pdev)
 	struct resource	*res;
 	struct imx_usbmisc *data;
 	const struct of_device_id *of_id;
+	int ret;
 
 	of_id = of_match_device(usbmisc_imx_dt_ids, &pdev->dev);
 	if (!of_id)
@@ -1265,6 +1284,20 @@ static int usbmisc_imx_probe(struct platform_device *pdev)
 	if (IS_ERR(data->base))
 		return PTR_ERR(data->base);
 
+	data->clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(data->clk)) {
+		dev_err(&pdev->dev,
+			"failed to get clock, err=%ld\n", PTR_ERR(data->clk));
+		return PTR_ERR(data->clk);
+	}
+
+	ret = clk_prepare_enable(data->clk);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"clk_prepare_enable failed, err=%d\n", ret);
+		return ret;
+	}
+
 	data->ops = (const struct usbmisc_ops *)of_id->data;
 	platform_set_drvdata(pdev, data);
 
@@ -1285,6 +1318,9 @@ static int usbmisc_imx_probe(struct platform_device *pdev)
 
 static int usbmisc_imx_remove(struct platform_device *pdev)
 {
+	struct imx_usbmisc *usbmisc;
+	usbmisc = platform_get_drvdata(pdev);
+	clk_disable_unprepare(usbmisc->clk);
 	return 0;
 }
 
diff --git a/include/linux/usb/chipidea.h b/include/linux/usb/chipidea.h
index 7099ffc348bd..a8deec20a707 100644
--- a/include/linux/usb/chipidea.h
+++ b/include/linux/usb/chipidea.h
@@ -33,6 +33,8 @@ struct ci_hdrc_platform_data {
 	const char	*name;
 	/* offset of the capability registers */
 	uintptr_t	 capoffset;
+	int		 id_gpio;
+	int		 id_irq;
 	unsigned	 power_budget;
 	struct phy	*phy;
 	/* old usb_phy interface */
-- 
2.14.3

